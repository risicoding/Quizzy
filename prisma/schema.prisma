model Quiz {
  id           String        @id @default(uuid())
  creatorId    String
  creator      User          @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  questions    Question[]
  quizSessions QuizSession[]
  createdAt    DateTime      @default(now())
}

model Question {
  id            String   @id @default(uuid())
  quizId        String
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  text          String
  options       String[]
  correctAnswer String
  createdAt     DateTime @default(now())
  Answer        Answer[]
}

model QuizSession {
  id                   String        @id @default(uuid())
  quizId               String
  quiz                 Quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  isActive             Boolean       @default(true)
  currentQuestionIndex Int           @default(0)
  users                SessionUser[]
  createdAt            DateTime      @default(now())
}

model SessionUser {
  id        String      @id @default(uuid())
  sessionId String
  session   QuizSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  userId    String
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int         @default(0)
  createdAt DateTime    @default(now())
  Answer    Answer[]
}

model Answer {
  id             String      @id @default(uuid())
  sessionUserId  String
  sessionUser    SessionUser @relation(fields: [sessionUserId], references: [id], onDelete: Cascade)
  questionId     String
  question       Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption String
  isCorrect      Boolean
  createdAt      DateTime    @default(now())
}

model User {
  id            String        @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  Quiz          Quiz[]
  SessionUser   SessionUser[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
